// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Game {
  id          Int       @id @default(autoincrement())
  name        String
  platform    String
  status      Status    @default(TO_PLAY)
  genre       String?
  releaseDate DateTime?
  notes       String?
  user        User      @relation(fields: [userId], references: [id])
  userId      String
}

enum Status {
  WANT_TO_BUY
  PREORDER
  TO_PLAY
  PLAYING
  COMPLETED
  DROPPED
}

model UserSettings {
  id     Int    @id @default(autoincrement())
  theme  Theme  @default(SYSTEM)
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

enum Theme {
  LIGHT
  DARK
  SYSTEM
}

model IGDBAuth {
  id           Int       @id @default(autoincrement())
  access_token String?
  expires      DateTime?
  updatedAt    DateTime
}

model User {
  id            String        @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  Game          Game[]
  UserSettings  UserSettings?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
