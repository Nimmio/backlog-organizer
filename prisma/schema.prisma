// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x", "rhel-openssl-1.0.x"]
  output        = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model GameStatus {
  id         Int       @id @default(autoincrement())
  platform   Platform? @relation(fields: [platformId], references: [id])
  platformId Int?

  status     Status  @default(BACKLOG)
  notes      String?
  user       User    @relation(fields: [userId], references: [id])
  userId     String
  igdbGame   Game    @relation(fields: [igdbGameId], references: [id])
  igdbGameId Int
}

enum Status {
  WANT_TO_BUY
  PREORDER
  BACKLOG
  PLAYING
  COMPLETED
  ON_HOLD
}

model UserSettings {
  id     Int    @id @default(autoincrement())
  theme  Theme  @default(SYSTEM)
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

enum Theme {
  LIGHT
  DARK
  SYSTEM
}

model IGDBAuth {
  id           Int       @id @default(autoincrement())
  access_token String?
  expires      DateTime?
  updatedAt    DateTime
}

model Genre {
  id         Int      @id @unique
  checksum   String
  created_at DateTime
  name       String
  updated_at DateTime
  game       Game[]
}

model Platform {
  id         Int          @id @unique
  checksum   String
  created_at DateTime
  name       String
  updated_at DateTime
  games      Game[]
  gameStatus GameStatus[]
}

model Game {
  id                 Int          @id @unique
  checksum           String?
  coverUrl           String?
  created_at         DateTime?
  first_release_date Int?
  genres             Genre[]
  name               String
  platforms          Platform[]
  summary            String?
  updated_at         DateTime?
  gameStatus         GameStatus[]
}

model User {
  id            String        @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  gameStatus    GameStatus[]
  UserSettings  UserSettings?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
